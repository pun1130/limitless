import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    id("wheel-fabric").version("latest.integration")
    id("kbootstrap").version("latest.integration")
    id("fabric.mod.gradle").version("latest.integration")
    id("com.modrinth.minotaur").version("latest.integration")
}

group = "net.auoeke"
version = "1.5.4"
description = "a mod about enchanting and exceeding Minecraft's limits"

defaultTasks("generateMetadata")

sourceSets {
    main {
        kotlin.srcDir("src")
        java.srcDir("src")

        resources {
            srcDir("resources")
            include("assets/", "data/", "*.json")
        }
    }

    test {
        java.srcDir("test")
    }
}

dependencies {
    mod("net.auoeke:kbootstrap:latest.integration")
    modInclude("api-base")
    modInclude("api-resource-loader")
    modInclude("api-tag-extensions")
    modInclude("net.fabricmc.fabric-api:fabric-command-api-v1:latest.integration")
    modInclude("huntingham-hills")
    modInclude("reflect")
    bloatedInclude("cloth-config")
    apiInclude("shortcode")

    bloated("mod-menu:latest.integration")
}

configurations.all {
    resolutionStrategy.eachDependency {
        if (requested.name == "fabric-resource-loader-v0") {
            useVersion("0.4.8+a00e834b18")
        }
    }
}

mod {
    author("auoeke")

    contact {
        sources = "https://git.auoeke.net/limitless"
        issues = "https://git.auoeke.net/limitless/issues"
    }

    license("GNU LGPL v3.0")
    icon("assets/limitless/icon.png")
    mixin("limitless.mixins.json")

    entrypoints(
        main: [kbootstrap: 'net.auoeke.limitless.Limitless'],
        client: [kbootstrap: 'net.auoeke.limitless.Limitless'],
        modmenu: [kbootstrap: 'net.auoeke.limitless.Limitless$ModMenu']
    )
}

task modrinth(type: TaskModrinthUpload) {
    if (token = System.properties["modrinth"]) {
        publish.finalizedBy(it)
        it.dependsOn(publish)
    }

    projectId = "Qx0jUYY8"
    versionNumber = version
    uploadFile = remapJar

    addGameVersion("1.17.1")
    addLoader("fabric")

    doFirst {
        logger.lifecycle(/Enter the changelog ending with "EOF"./)
        changelog = ""

        while (true) {
            def line = System.in.newReader().readLine()

            if (line.endsWith("EOF")) {
                changelog += line.replaceFirst(/EOF$/, "")

                break
            }

            changelog += line
        }
    }
}
